tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
iERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(prd)
i<-i+1
}
}
bagging_method_names = c("CART","RF","knn","lda","mda")
bagging_methods = c("classif.rpart","classif.ranger","classif.knn","classif.lda","classif.mda")
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
iERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(prd)
i<-i+1
}
}
par(mfrow=c(1,1))
boxplot(bagERRMAT,names=bagging_method_names)
bagERRMAT
##################################
B<-5
bagERRMAT<-matrix(0,B,5)
bagERRMAT<-matrix(0,B,length(bagging_methods))
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(prd)
i<-i+1
}
}
par(mfrow=c(1,1))
boxplot(bagERRMAT,names=bagging_method_names)
##################################
bagging_method_names = c("CART","RF","knn","lda","mda")
bagging_methods = c("classif.rpart","classif.ranger","classif.knn","classif.lda","classif.mda")
B<-10
bagERRMAT<-matrix(0,B,length(bagging_methods))
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
}
par(mfrow=c(1,1))
boxplot(bagERRMAT,names=bagging_method_names)
par(mfrow=c(1,1))
boxplot(bagERRMAT,names=bagging_method_names)
bagERRMAT
B<-10
bagERRMAT<-matrix(0,B,length(bagging_methods))
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
}
print(method)
learner = makeBaggingWrapper(method)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
}
par(mfrow=c(1,1))
boxplot(bagERRMAT,names=bagging_method_names)
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
stacking_learners = c()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners = c(stacking_learners, learner)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
stack_learner = makeStackedLearner(stacking_learners)
mdl = train(stack_learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
}
##################################
bagging_method_names = c("CART","RF","knn","lda","mda", "stacked")
bagging_methods = c("classif.rpart","classif.ranger","classif.knn","classif.lda","classif.mda")
B<-10
bagERRMAT<-matrix(0,B,length(bagging_methods_names))
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
stacking_learners = c()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners = c(stacking_learners, learner)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
stack_learner = makeStackedLearner(stacking_learners)
mdl = train(stack_learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
}
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
stacking_learners = c()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners = c(stacking_learners, learner)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners = c(stacking_learners, learner)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
i<-1
stacking_learners = c()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners = c(stacking_learners, learner)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
stack_learner = makeStackedLearner(stacking_learners)
help(c)
help(append)
i<-1
stacking_learners = c()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners = append(stacking_learners, learner)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
help(list)
stacking_learners = list()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners = append(stacking_learners, learner)
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
help(append)
stacking_learners = list()
i<-1
stacking_learners = list()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners[i] = learner
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
stack_learner = makeStackedLearner(stacking_learners)
View(stacking_learners)
i<-1
stacking_learners = list()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners[[i]] = learner
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
View(stacking_learners)
stack_learner = makeStackedLearner(stacking_learners)
stack_learner = makeStackedLearner(stacking_learners, method="average")
stack_learner = makeStackedLearner(stacking_learners, method="average", predict.type = "prob")
mdl = train(stack_learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
predictions
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
##################################
bagging_method_names = c("CART","RF","knn","lda","mda", "stacked")
bagging_methods = c("classif.rpart","classif.ranger","classif.knn","classif.lda","classif.mda")
B<-10
bagERRMAT<-matrix(0,B,length(bagging_methods_names))
bagERRMAT<-matrix(0,B,length(bagging_method_names))
stack_learner = makeStackedLearner(stacking_learners, method="average", predict.type = "prob")
mdl = train(stack_learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
##################################
bagging_method_names = c("CART","RF","knn","lda","mda", "stacked")
bagging_methods = c("classif.rpart","classif.ranger","classif.knn","classif.lda","classif.mda")
B<-10
bagERRMAT<-matrix(0,B,length(bagging_method_names))
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
stacking_learners = list()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners[[i]] = learner
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
stack_learner = makeStackedLearner(stacking_learners, method="average", predict.type = "prob")
mdl = train(stack_learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
}
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
stacking_learners = list()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners[[i]] = learner
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
stack_learner = makeStackedLearner(stacking_learners, method="average", predict.type = "prob")
mdl = train(stack_learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
}
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
stacking_learners = list()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners[[i]] = learner
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
print("stacked")
stack_learner = makeStackedLearner(stacking_learners, method="average", predict.type = "prob")
mdl = train(stack_learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
}
B<-5
bagERRMAT<-matrix(0,B,length(bagging_method_names))
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
stacking_learners = list()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners[[i]] = learner
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
print("stacked")
stack_learner = makeStackedLearner(stacking_learners, method="average", predict.type = "prob")
mdl = train(stack_learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
}
par(mfrow=c(1,1))
boxplot(bagERRMAT,names=bagging_method_names)
data("Ozone")
Ozone
########################################
data("Ozone")
data<-Ozone
data<-data[complete.cases(data), ]
data("Ozone")
Ozone
data("Sonar")
Sonar
########################################
data("Sonar")
data<-Sonar
data<-data[complete.cases(data), ]
# data<-data[,-1]
classind <- 61
names(data)[classind]<-"class"
##########################################
# method_names = c("CART","RF","knn","lda","qda","pda","nb","mda")
# methods = c("rpart","ranger","knn","lda","qda","pda","nb","mda")
method_names = c("CART","RF","knn","lda","pda","nb","mda")
methods = c("rpart","ranger","knn","lda","pda","nb","mda")
B<-5
iERRMAT<-matrix(0,B,7)
ctrl<-trainControl(method="cv",summaryFunction=multiClassSummary)
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainW<-data[inTrain,-classind]
testW<-data[-inTrain,-classind]
trainwY<-data$class[inTrain]
testwY<-data$class[-inTrain]
i<-1
for (method in methods) {
print(method)
fit<-caret::train(class~.,data=data[inTrain,],method=method,tuneLength=15,trControl=ctrl)
pp<-predict(fit,newdata=data[-inTrain,-classind],type="raw")
iERRMAT[b,i]<-length(pp[pp!=data$class[-inTrain]])/length(pp)
i<-i+1
}
print(b)
}
par(mfrow=c(1,1))
boxplot(iERRMAT,names=method_names)
##################################
bagging_method_names = c("CART","RF","knn","lda","mda", "stacked")
bagging_methods = c("classif.rpart","classif.ranger","classif.knn","classif.lda","classif.mda")
B<-5
bagERRMAT<-matrix(0,B,length(bagging_method_names))
for (b in (1:B)) {
inTrain<-createDataPartition(data$class,p=3/4,list=FALSE)
trainData<-data[inTrain,]
testData<-data[-inTrain,]
tskTrain = makeClassifTask(data=trainData,target="class")
tskTest = makeClassifTask(data=testData,target="class")
i<-1
stacking_learners = list()
for (method in bagging_methods) {
print(method)
learner = makeBaggingWrapper(method)
stacking_learners[[i]] = learner
mdl = train(learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
i<-i+1
}
print("stacked")
stack_learner = makeStackedLearner(stacking_learners, method="average", predict.type = "prob")
mdl = train(stack_learner,tskTrain)
prd = predict(mdl,tskTest)
predictions = prd$data$response
bagERRMAT[b,i]<-length(predictions[predictions!=testData$class])/length(predictions)
print(bagERRMAT[b,i])
print(b)
}
par(mfrow=c(1,1))
boxplot(bagERRMAT,names=bagging_method_names)
