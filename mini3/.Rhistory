lapply(clustering, get_dims) > -1
type(new_clustering)
new_clustering = clustering[lapply(clustering, get_dims) > 1]
View(new_clustering)
clustering <- FIRES(data, 0.1, 400)
get_dims <- function(cluster){
return(sum(cluster[['subspace']]))
}
new_clustering = clustering[lapply(clustering, get_dims) > 1]
plot(new_clustering, data)
clustering <- FIRES(data, 0.1, 400)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
clustering <- FIRES(data, 0.07, 400)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
clustering <- FIRES(data, 0.07, 300)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
clustering <- FIRES(data, 0.07, 300)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
clustering <- FIRES(data, 0.07, 200)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
clustering <- FIRES(data, 0.07, 300)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
set.seed(2)
require(mnormt)
varcov <- diag(2)*0.05
data_new <- rmnorm(500, mean=c(0,0), varcov=varcov)
data_new <- rbind(data_new,rmnorm(500, mean=c(5,5), varcov=varcov))
data_new <- rbind(data_new,rmnorm(500, mean=c(10,10), varcov=varcov))
# c_data <- readMat("/Users/adam/Programming/BigData/matlab-3clust.mat")[["data"]]
c_data <- data_new
# Add extra column, as unrelated feature
new_col <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col)
new_col1 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col1)
new_col2 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col2)
new_col3 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col3)
new_col4 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col4)
new_col5 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col5)
new_col6 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col6)
new_col7 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col7)
new_col8 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col8)
new_col9 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col9)
new_col10 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col10)
c_data <- sweep(c_data,2,apply(c_data,2,min))
c_data <- scale(c_data, center=FALSE, scale=apply(c_data,2,max))
data <- as.data.frame(c_data)
clustering <- FIRES(data, 0.07, 300)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
new_row <- runif(ncol(c_data), 0, 1)
c_data <- rbind(c_data, new_row)
data <- as.data.frame(c_data)
clustering <- FIRES(data, 0.07, 300)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
clustering <- FIRES(data, 0.08, 300)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
View(data)
View(c_data)
set.seed(2)
require(mnormt)
varcov <- diag(2)*0.05
data_new <- rmnorm(500, mean=c(0,0), varcov=varcov)
data_new <- rbind(data_new,rmnorm(500, mean=c(5,5), varcov=varcov))
data_new <- rbind(data_new,rmnorm(500, mean=c(10,10), varcov=varcov))
# c_data <- readMat("/Users/adam/Programming/BigData/matlab-3clust.mat")[["data"]]
c_data <- data_new
# Add extra column, as unrelated feature
new_col <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col)
new_col1 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col1)
new_col2 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col2)
new_col3 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col3)
new_col4 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col4)
new_col5 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col5)
new_col6 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col6)
new_col7 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col7)
new_col8 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col8)
new_col9 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col9)
new_col10 <- runif(nrow(c_data), -200, 200)
c_data <- cbind(c_data, new_col10)
c_data <- sweep(c_data,2,apply(c_data,2,min))
c_data <- scale(c_data, center=FALSE, scale=apply(c_data,2,max))
# Add randomness in all dimensions
c_data <- rbind(c_data, runif(ncol(c_data), 0, 1))
data <- as.data.frame(c_data)
View(data)
# Add randomness in all dimensions
for (i in 1:100){
c_data <- rbind(c_data, runif(ncol(c_data), 0, 1))
}
data <- as.data.frame(c_data)
clustering <- FIRES(data, 0.08, 400)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
clustering <- FIRES(data, 0.01, 400)
clustering <- FIRES(data, 0.01, 200)
clustering <- FIRES(data, 0.04, 200)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
clustering <- FIRES(data, 0.05, 200)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
help(FIRES)
clustering <- FIRES(data, base_dbscan_epsilon=0.05, base_dbscan_minpts=300, post_dbscan_epsilon=0.05, post_dbscan_minpts=300)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
clustering <- FIRES(data, base_dbscan_epsilon=0.05, base_dbscan_minpts=200, post_dbscan_epsilon=0.05, post_dbscan_minpts=300)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
help(FIRES)
clustering <- FIRES(data, base_dbscan_epsilon=0.05, base_dbscan_minpts=200, post_dbscan_epsilon=0.1, post_dbscan_minpts=400)
# clustering <- CLIQUE(data, 20, 0.1)
plot(clustering, data)
#### Install packages ####
list.of.packages <- c("mlr", "unbalanced", "caret", "ROSE", "DMwR")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
#### Sampling methods ####
## Classification
library(caret)
evaluateClassifiers <- function(dd, nIterations) {
trainParams <- trainControl(method="cv", summaryFunction=multiClassSummary)
methods <- c("ranger", "knn", "lda", "qda")
readableMethods <- c("RF","kNN","LDA","QDA")
sampleMethods <- c("raw", "up-random", "up-smote", "down-random", "down-tomek")
kappaMatrix <- matrix(0, length(sampleMethods), length(methods))
for (iIteration in 1:nIterations) {
# Create partitioning indexes for testing
inTrain = createDataPartition(dd$class, p=3/4, list=FALSE)
trainData = dd[inTrain,]
testData = dd[-inTrain,]
testClasses = testData$class
testData[, c("class")] = list(NULL) # Test data without true classes
for(iSampleMethod in 1:length(sampleMethods)) {
trainData = createSample(trainData, sampleMethods[iSampleMethod])
for(iMethod in 1:length(methods)) {
fit <- caret::train(class~., data=trainData, method=methods[iMethod], tuneLength=15, trControl=trainParams)
pp <- predict(fit, newdata=testData, type="raw")
conf <- confusionMatrix(pp, testClasses)
kappa <- conf$overall[2]
kappaMatrix[iSampleMethod, iMethod] = kappaMatrix[iSampleMethod, iMethod] + kappa
}
}
}
kappaMatrix = kappaMatrix / nIterations
return(list("classMethods" = readableMethods, "sampleMethods" = sampleMethods, "data" = kappaMatrix))
}
library(DMwR)
library(ROSE)
evaluateClassifiers <- function(dd, nIterations) {
trainParams <- trainControl(method="cv", summaryFunction=multiClassSummary)
methods <- c("ranger", "knn", "lda", "qda")
readableMethods <- c("RF","kNN","LDA","QDA")
sampleMethods <- c("none", "up", "smote", "down", "rose")
readableSampleMethods <- c("raw", "up-random", "up-smote", "down-random", "up-rose")
kappaMatrix <- matrix(0, length(sampleMethods), length(methods))
confusion = list("classMethod"= NULL, "sampleMethod" = NULL, "conf" = NULL)
maxKappa = -1
for (iIteration in 1:nIterations) {
# Create partitioning indexes for testing
inTrain = createDataPartition(dd$class, p=3/4, list=FALSE)
trainData = dd[inTrain,]
testData = dd[-inTrain,]
testClasses = testData$class
testData[, c("class")] = list(NULL) # Test data without true classes
for(iSampleMethod in 1:length(sampleMethods)) {
if (sampleMethods[iSampleMethod] == "none")
trainParams$sampling <- NULL
else
trainParams$sampling <- sampleMethods[iSampleMethod]
for(iMethod in 1:length(methods)) {
fit <- caret::train(class~., data=trainData, method=methods[iMethod], tuneLength=15, trControl=trainParams)
pp <- predict(fit, newdata=testData, type="raw")
conf <- confusionMatrix(pp, testClasses)
kappa <- conf$overall[2]
kappaMatrix[iSampleMethod, iMethod] = kappaMatrix[iSampleMethod, iMethod] + kappa
if (kappa > maxKappa) {
maxKappa = kappa
confusion$classMethod = methods[iMethod]
confusion$sampleMethod = sampleMethods[iSampleMethod]
confusion$conf = conf
}
}
}
}
kappaMatrix = kappaMatrix / nIterations
return(list("classMethods" = readableMethods, "sampleMethods" = readableSampleMethods, "data" = kappaMatrix, "confusion" = confusion))
}
classify <- function(dd, classMethod, sampleMethod=NULL) {
trainParams <- trainControl(method="cv", summaryFunction=multiClassSummary)
if (!is.null(sampleMethod))
trainParams$sampling = sampleMethod
# Create partitioning indexes for testing
inTrain = createDataPartition(dd$class, p=3/4, list=FALSE)
trainData = dd[inTrain,]
testData = dd[-inTrain,]
testClasses = testData$class
testData[, c("class")] = list(NULL) # Test data without true classes
fit <- caret::train(class~., data=trainData, method=classMethod, tuneLength=15, trControl=trainParams)
pp <- predict(fit, newdata=testData, type="raw")
conf <- confusionMatrix(pp, testClasses)
return(conf)
}
# Relative self esteem data
setwd('~/Programming/BigData/mini3')
dat = read.csv("RSE.csv", header = TRUE, sep = "\t")
dat$age[dat$age < 20] = 1
dat$age[dat$age >= 20 & dat$age < 40] = 2
dat$age[dat$age >= 40] = 3
dat$age <- factor(dat$age)
names(dat)[12]<-"class"
dat = dat[-c(11, 13, 14)]
class_ind = 11
subdat = dat[sample(1:nrow(dat), 2000, replace=FALSE),]
# Single classification
minidat = dat[sample(1:nrow(dat), 10000, replace=FALSE),]
classify(minidat, 'lda')
classify(minidat, 'lda', 'up')
classify(minidat, 'lda', 'smote')
roc
help(roc)
help('roc')
plot(tpr, fpr)
# experiment with roc plot
tpr = matrix(2,2)
fpr = matrix(2,2)
tpr[1,1] = 0.6
tpr[1,2] = 0.7
tpr[2,1] = 0.8
tpr[2,2] = 0.6
fpr[1,1] = 0.4
fpr[1,2] = 0.8
fpr[2,1] = 0.5
fpr[2,2] = 0.9
help(matrix)
# experiment with roc plot
tpr = matrix(,2,2)
fpr = matrix(,2,2)
tpr[1,1] = 0.6
tpr[1,2] = 0.7
tpr[2,1] = 0.8
tpr[2,2] = 0.6
fpr[1,1] = 0.4
fpr[1,2] = 0.8
fpr[2,1] = 0.5
fpr[2,2] = 0.9
plot(tpr, fpr)
plot(c(0,1), c(0,1))
plot(tpr, fpr)
plot(c(0,1), c(0,1), type='o')
plot(c(0,1), c(0,1), type='i')
plot(c(0,1), c(0,1), type='-')
plot(c(0,1), c(0,1), type='l')
ylim(0,1)
xlim(0,1)
plot(c(0,1), c(0,1), type='l')
plot(c(0,1), c(0,1), type='l', lty=2)
plot(c(0,1), c(0,1), type='l', lty=2, col='red')
title(main="ROC Space", col.main="red", font.main=4)
title(main="ROC Space", font.main=4)
xlim(0,1)
xlim(0,0.5)
xlim(0,0.5)
plot(c(0,1), c(0,1), type='l', lty=2, col='red')
title(main="ROC Space", font.main=4)
plot(tpr, fpr)
plot(c(0,1), c(0,1), type='l', lty=2, col='red', xlim=c(0, 1), ylim=c(0, 1))
plot(c(0,1), c(0,1), type='l', lty=2, col='red', xlim=c(0.5, 1), ylim=c(0, 1))
plot(c(0,1), c(0,1), type='l', lty=2, col='red', xlim=c(0.1, 1), ylim=c(0, 1))
plot(c(0,1), c(0,1), type='l', lty=2, col='red', xlim=c(0.05, 1), ylim=c(0, 1))
plot(c(0,1), c(0,1), type='l', lty=2, col='red', xlim=c(0.01, 0.99), ylim=c(0.01, 0.99), asp=1)
plot(c(0,1), c(0,1), type='l', lty=2, col='red', xlim=c(0.01, 0.99), ylim=c(0.01, 0.99))
plot(c(0,1), c(0,1), type='l', lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space", font.main=4)
title(main="ROC Space")
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
par(mar=c(4.2, 3.8, 0.2, 0.2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
par(mar=c(2.2, 2.8, 0.2, 0.2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
par(mar=c(0.1, 0.1, 0.2, 0.2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
par(mar=c(2, 2, 2, 2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
plot_colors <- c(rgb(r=0.0,g=0.0,b=0.9), "red", "forestgreen")
plot_colors <- c(rgb(r=0.0,g=0.0,b=0.9), "red", "forestgreen")
legend("topleft", c('a','b','c'), cex=0.8, col=plot_colors,
lty=1:3, lwd=2, bty="n");
points(tpr,fpr)
help(rep)
rep(5,9)
help(points)
rep(1:2,2)
rep(1:2,2, times=2)
rep(1:3,2)
rep(t(1:3),2)
point_colors <- c("blue", "red", "forestgreen")
points(tpr,fpr, pcf=point_characters, col=point_colors)
point_colors <- c("blue", "red", "forestgreen")
point_characters <- c(1,2,3)
points(tpr,fpr, pcf=point_characters, col=point_colors)
help(legend)
legend("topleft", c('a','b','c'), cex=0.8, col=plot_colors, lwd=2, bty="n");
legend("bottomright", c('a','b','c'), cex=0.8, col=point_colors, lwd=2, bty="n");
help(legend)
legend("bottomright", c('a','b','c'), cex=0.8, pcf=point_characters, bty="n");
legend("bottomright", c('a','b','c'), cex=0.8, pch=point_characters, bty="n");
par(mar=c(2, 2, 2, 2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
point_colors <- c("blue", "red", "forestgreen")
point_characters <- c(1,2,3)
points(tpr,fpr, pcf=point_characters, col=point_colors)
points(tpr,fpr, pch=point_characters, col=point_colors)
par(mar=c(2, 2, 2, 2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
point_colors <- c("blue", "red", "forestgreen")
point_characters <- c(1,2,3)
points(tpr,fpr, pch=point_characters, col=point_colors)
legend("topleft", c('a','b','c'), cex=0.8, col=point_colors, lwd=2, bty="n");
legend("bottomright", c('a','b','c'), cex=0.8, pch=point_characters, bty="n");
legend("topleft", c('a','b','c'), cex=0.8, col=point_colors, lwd=2, bty="n")
legend("bottomright", c('a','b','c'), cex=0.8, pch=point_characters, bty="n")
point_colors <- c("blue", "red") #, "forestgreen")
point_characters <- c(1,2) #,3)
points(tpr,fpr, pch=point_characters, col=point_colors)
legend("topleft", c('a','b','c'), cex=0.8, col=point_colors, lwd=2, bty="n")
legend("bottomright", c('a','b','c'), cex=0.8, pch=point_characters, bty="n")
# experiment with roc plot
tpr = matrix(,2,2)
fpr = matrix(,2,2)
tpr[1,1] = 0.6
tpr[1,2] = 0.7
tpr[2,1] = 0.8
tpr[2,2] = 0.6
fpr[1,1] = 0.4
fpr[1,2] = 0.8
fpr[2,1] = 0.5
fpr[2,2] = 0.9
par(mar=c(2, 2, 2, 2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
points(tpr,fpr, pch=rep(point_characters, length(point_colors)), col=rep(point_colors, length(point_characters)))
legend("topleft", c('a','b','c'), cex=0.8, col=point_colors, lwd=2, bty="n")
legend("bottomright", c('a','b','c'), cex=0.8, pch=point_characters, bty="n")
# experiment with roc plot
tpr = matrix(,3,2)
fpr = matrix(,3,2)
tpr[1,1] = 0.6
tpr[1,2] = 0.7
tpr[2,1] = 0.8
tpr[2,2] = 0.6
tpr[3,1] = 0.4
tpr[3,2] = 0.75
fpr[1,1] = 0.4
fpr[1,2] = 0.8
fpr[2,1] = 0.5
fpr[2,2] = 0.9
fpr[3,1] = 0.1
fpr[3,2] = 0.9
par(mar=c(2, 2, 2, 2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
point_colors = c("blue", "purple","forestgreen")
method_names = c("lda", "ranger", "qda")
point_characters <- c(1,2)
sample_names = c("raw", "up")
points(tpr,fpr, pch=rep(point_characters, length(point_colors)), col=t(rep(point_colors, length(point_characters))))
legend("topleft",method_names, cex=0.8, col=point_colors, lwd=2, bty="n")
legend("bottomright", sample_names, cex=0.8, pch=point_characters, bty="n")
par(mar=c(2, 2, 2, 2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
point_colors = c("blue", "purple","forestgreen")
method_names = c("lda", "ranger", "qda")
sample_names = c("raw", "up")
point_characters <- c(1,2)
points(tpr, fpr, cex=3, pch=rep(point_characters, length(point_colors)), col=t(rep(point_colors, length(point_characters))))
legend("topleft",method_names, cex=0.8, col=point_colors, lwd=2, bty="n")
legend("bottomright", sample_names, cex=0.8, pch=point_characters, bty="n")
par(mar=c(2, 2, 2, 2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
point_colors = c("blue", "purple","forestgreen")
method_names = c("lda", "ranger", "qda")
sample_names = c("raw", "up")
point_characters <- c(1,2)
points(tpr, fpr, cex=2, pch=rep(point_characters, length(point_colors)), col=t(rep(point_colors, length(point_characters))))
legend("topleft",method_names, cex=0.8, col=point_colors, lwd=2, bty="n")
legend("bottomright", sample_names, cex=0.8, pch=point_characters, bty="n")
legend("topleft",method_names, cex=1, col=point_colors, lwd=2, bty="n")
legend("bottomright", sample_names, cex=1, pch=point_characters, bty="n")
par(mar=c(2, 2, 2, 2))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
point_colors = c("blue", "purple","forestgreen")
method_names = c("lda", "ranger", "qda")
sample_names = c("raw", "up")
point_characters <- c(1,2)
points(tpr, fpr, cex=2, pch=rep(point_characters, length(point_colors)), col=t(rep(point_colors, length(point_characters))))
legend("topleft",method_names, cex=1, col=point_colors, lwd=2, bty="n")
legend("bottomright", sample_names, cex=1, pch=point_characters, bty="n")
par(mar=c(2.5, 2.5, 2.5, 2.5))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
point_colors = c("blue", "purple","forestgreen")
method_names = c("lda", "ranger", "qda")
sample_names = c("raw", "up")
point_characters <- c(1,2)
points(tpr, fpr, cex=2, pch=rep(point_characters, length(point_colors)), col=t(rep(point_colors, length(point_characters))))
legend("topleft", method_names, cex=1.5, col=point_colors, lwd=2, bty="n")
legend("bottomright", sample_names, cex=1.5, pch=point_characters, bty="n")
par(mar=c(2.5, 2.5, 2.5, 2.5))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
title(main="ROC Space")
point_colors = c("blue", "purple","forestgreen")
method_names = c("lda", "ranger", "qda")
sample_names = c("raw", "up")
point_characters <- c(1,2)
points(tpr, fpr, cex=2, pch=rep(point_characters, length(point_colors)), col=t(rep(point_colors, length(point_characters))))
legend("topleft", method_names, cex=1.2, col=point_colors, lwd=2, bty="n")
legend("bottomright", sample_names, cex=1.2, pch=point_characters, bty="n")
points(tpr, fpr, cex=2, lwd=2, pch=rep(point_characters, length(point_colors)), col=t(rep(point_colors, length(point_characters))))
plot(c(0,1), c(0,1), type='l', lwd=2, lty=2, col='red', xlim=c(0.03, 0.97), ylim=c(0.03, 0.97))
points(tpr, fpr, cex=2, lwd=1, pch=rep(point_characters, length(point_colors)), col=t(rep(point_colors, length(point_characters))))
points(tpr, fpr, cex=2, lwd=2, pch=rep(point_characters, length(point_colors)), col=t(rep(point_colors, length(point_characters))))
help(confustionMatrix)
help(confusionMatrix)
help(caret::train)
help(ctrain)
help(train)
help(apply)
apply(c('a', 'b', 'c'), 4, rep)
help(rep)
